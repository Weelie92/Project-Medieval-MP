//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Characters/Player/PlayerControls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""403bb1b4-f741-4b64-b507-ee3a74ce8e36"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f0fdbf3c-f79b-46dd-8292-b892ca86ff6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f39af0d-890f-400d-bbf5-37a21d243e4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""baa8cd37-6f44-401c-841e-c940cd887f5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""cb00815c-a992-4cff-869b-9875a8b89a32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prone"",
                    ""type"": ""Button"",
                    ""id"": ""408fbfbd-9ca3-4c07-ac44-f1db256190eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainHand"",
                    ""type"": ""Button"",
                    ""id"": ""8530fe50-74f0-499b-994b-1ea3f8eb8744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OffHand"",
                    ""type"": ""Button"",
                    ""id"": ""0ae13659-ec1a-48f2-a97b-14da8bd24eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""bd82003c-81eb-43a6-ad93-dce03e270a6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d67bd6ce-ce63-4ed8-ac14-854206d275a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""940d78c5-4b1e-4f6f-9fea-eec4f152b813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScoreBoard"",
                    ""type"": ""Button"",
                    ""id"": ""f1916fdc-3f28-4959-acfa-0b5b45434b65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""927a5d47-cec0-4143-9356-76deac9acd88"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a156bec9-4142-4395-b893-9d59360d1456"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5d4e4f7e-69c2-4dd3-8da7-a4357ca4eadd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""960722f1-edaf-47eb-b263-245aea5f5363"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c31ff58-34f7-49b9-a52b-8c97c4eb1af6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""19b9b38d-73a7-455f-9f2c-be2a91c272b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""160ca154-c47c-42de-84dd-ed76e76d6bf7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""941790b4-fe1e-4877-8557-b550363e6d3e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""770a919b-a1b6-441b-a910-2bb489909470"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43822823-3089-411a-9f07-8cdf9f5799b0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62858bfc-7145-4476-9c00-5ebbb2735fa7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OffHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee314993-f473-4515-aaca-bd53fea849a6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f78cea8-4f75-4943-8e45-62dbcb74a05d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c1249b2-1faa-4437-b75b-f421e75c18b1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02f5d94f-12d9-4502-9ba0-2fd00c95bde9"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScoreBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Customize"",
            ""id"": ""59a230a5-5c55-4b2a-afad-29872620f2e7"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""2ee5f62e-4c3b-4d50-86ba-0f5073787a48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""ff49ef15-720f-4d58-9b39-69bdfba7534c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Button"",
                    ""id"": ""08679459-f3ef-46de-b0f5-c18ded7ac8bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""927b8bee-5328-4287-aaec-e02dea45e817"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4cc3e30-00e9-4edb-8e26-2816492876f6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27178e85-356f-4a8b-92ef-2fb8df0ecac4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b412ed84-996c-4e9c-994c-b0401ea7e762"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Survey"",
            ""id"": ""5b02c463-6118-4d54-b521-e55b8bfafd41"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""caba7ce1-9c69-4463-b838-347bbef3946b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""238e813b-9096-431a-bd62-4d4f78982a7d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Land
        m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
        m_Land_Move = m_Land.FindAction("Move", throwIfNotFound: true);
        m_Land_Jump = m_Land.FindAction("Jump", throwIfNotFound: true);
        m_Land_Use = m_Land.FindAction("Use", throwIfNotFound: true);
        m_Land_Crouch = m_Land.FindAction("Crouch", throwIfNotFound: true);
        m_Land_Prone = m_Land.FindAction("Prone", throwIfNotFound: true);
        m_Land_MainHand = m_Land.FindAction("MainHand", throwIfNotFound: true);
        m_Land_OffHand = m_Land.FindAction("OffHand", throwIfNotFound: true);
        m_Land_Run = m_Land.FindAction("Run", throwIfNotFound: true);
        m_Land_Look = m_Land.FindAction("Look", throwIfNotFound: true);
        m_Land_Pause = m_Land.FindAction("Pause", throwIfNotFound: true);
        m_Land_ScoreBoard = m_Land.FindAction("ScoreBoard", throwIfNotFound: true);
        // Customize
        m_Customize = asset.FindActionMap("Customize", throwIfNotFound: true);
        m_Customize_Close = m_Customize.FindAction("Close", throwIfNotFound: true);
        m_Customize_Rotate = m_Customize.FindAction("Rotate", throwIfNotFound: true);
        m_Customize_MoveCamera = m_Customize.FindAction("MoveCamera", throwIfNotFound: true);
        // Survey
        m_Survey = asset.FindActionMap("Survey", throwIfNotFound: true);
        m_Survey_Close = m_Survey.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Land
    private readonly InputActionMap m_Land;
    private ILandActions m_LandActionsCallbackInterface;
    private readonly InputAction m_Land_Move;
    private readonly InputAction m_Land_Jump;
    private readonly InputAction m_Land_Use;
    private readonly InputAction m_Land_Crouch;
    private readonly InputAction m_Land_Prone;
    private readonly InputAction m_Land_MainHand;
    private readonly InputAction m_Land_OffHand;
    private readonly InputAction m_Land_Run;
    private readonly InputAction m_Land_Look;
    private readonly InputAction m_Land_Pause;
    private readonly InputAction m_Land_ScoreBoard;
    public struct LandActions
    {
        private @PlayerControls m_Wrapper;
        public LandActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Land_Move;
        public InputAction @Jump => m_Wrapper.m_Land_Jump;
        public InputAction @Use => m_Wrapper.m_Land_Use;
        public InputAction @Crouch => m_Wrapper.m_Land_Crouch;
        public InputAction @Prone => m_Wrapper.m_Land_Prone;
        public InputAction @MainHand => m_Wrapper.m_Land_MainHand;
        public InputAction @OffHand => m_Wrapper.m_Land_OffHand;
        public InputAction @Run => m_Wrapper.m_Land_Run;
        public InputAction @Look => m_Wrapper.m_Land_Look;
        public InputAction @Pause => m_Wrapper.m_Land_Pause;
        public InputAction @ScoreBoard => m_Wrapper.m_Land_ScoreBoard;
        public InputActionMap Get() { return m_Wrapper.m_Land; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
        public void SetCallbacks(ILandActions instance)
        {
            if (m_Wrapper.m_LandActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                @Use.started -= m_Wrapper.m_LandActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnUse;
                @Crouch.started -= m_Wrapper.m_LandActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnCrouch;
                @Prone.started -= m_Wrapper.m_LandActionsCallbackInterface.OnProne;
                @Prone.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnProne;
                @Prone.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnProne;
                @MainHand.started -= m_Wrapper.m_LandActionsCallbackInterface.OnMainHand;
                @MainHand.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnMainHand;
                @MainHand.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnMainHand;
                @OffHand.started -= m_Wrapper.m_LandActionsCallbackInterface.OnOffHand;
                @OffHand.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnOffHand;
                @OffHand.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnOffHand;
                @Run.started -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnRun;
                @Look.started -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnLook;
                @Pause.started -= m_Wrapper.m_LandActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnPause;
                @ScoreBoard.started -= m_Wrapper.m_LandActionsCallbackInterface.OnScoreBoard;
                @ScoreBoard.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnScoreBoard;
                @ScoreBoard.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnScoreBoard;
            }
            m_Wrapper.m_LandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Prone.started += instance.OnProne;
                @Prone.performed += instance.OnProne;
                @Prone.canceled += instance.OnProne;
                @MainHand.started += instance.OnMainHand;
                @MainHand.performed += instance.OnMainHand;
                @MainHand.canceled += instance.OnMainHand;
                @OffHand.started += instance.OnOffHand;
                @OffHand.performed += instance.OnOffHand;
                @OffHand.canceled += instance.OnOffHand;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @ScoreBoard.started += instance.OnScoreBoard;
                @ScoreBoard.performed += instance.OnScoreBoard;
                @ScoreBoard.canceled += instance.OnScoreBoard;
            }
        }
    }
    public LandActions @Land => new LandActions(this);

    // Customize
    private readonly InputActionMap m_Customize;
    private ICustomizeActions m_CustomizeActionsCallbackInterface;
    private readonly InputAction m_Customize_Close;
    private readonly InputAction m_Customize_Rotate;
    private readonly InputAction m_Customize_MoveCamera;
    public struct CustomizeActions
    {
        private @PlayerControls m_Wrapper;
        public CustomizeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Customize_Close;
        public InputAction @Rotate => m_Wrapper.m_Customize_Rotate;
        public InputAction @MoveCamera => m_Wrapper.m_Customize_MoveCamera;
        public InputActionMap Get() { return m_Wrapper.m_Customize; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CustomizeActions set) { return set.Get(); }
        public void SetCallbacks(ICustomizeActions instance)
        {
            if (m_Wrapper.m_CustomizeActionsCallbackInterface != null)
            {
                @Close.started -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnClose;
                @Rotate.started -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnRotate;
                @MoveCamera.started -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_CustomizeActionsCallbackInterface.OnMoveCamera;
            }
            m_Wrapper.m_CustomizeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
            }
        }
    }
    public CustomizeActions @Customize => new CustomizeActions(this);

    // Survey
    private readonly InputActionMap m_Survey;
    private ISurveyActions m_SurveyActionsCallbackInterface;
    private readonly InputAction m_Survey_Close;
    public struct SurveyActions
    {
        private @PlayerControls m_Wrapper;
        public SurveyActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Survey_Close;
        public InputActionMap Get() { return m_Wrapper.m_Survey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SurveyActions set) { return set.Get(); }
        public void SetCallbacks(ISurveyActions instance)
        {
            if (m_Wrapper.m_SurveyActionsCallbackInterface != null)
            {
                @Close.started -= m_Wrapper.m_SurveyActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_SurveyActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_SurveyActionsCallbackInterface.OnClose;
            }
            m_Wrapper.m_SurveyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
            }
        }
    }
    public SurveyActions @Survey => new SurveyActions(this);
    public interface ILandActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnProne(InputAction.CallbackContext context);
        void OnMainHand(InputAction.CallbackContext context);
        void OnOffHand(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnScoreBoard(InputAction.CallbackContext context);
    }
    public interface ICustomizeActions
    {
        void OnClose(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
    }
    public interface ISurveyActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
